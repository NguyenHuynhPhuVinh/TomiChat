import * as vscode from 'vscode';

/**
 * Service qu·∫£n l√Ω c·∫•u h√¨nh cho TomiChat
 */
export class ConfigService {
  private static instance: ConfigService;
  private readonly configSection = 'tomiChat';

  private constructor() {}

  public static getInstance(): ConfigService {
    if (!ConfigService.instance) {
      ConfigService.instance = new ConfigService();
    }
    return ConfigService.instance;
  }

  /**
   * L·∫•y c·∫•u h√¨nh hi·ªán t·∫°i
   */
  private getConfig(): vscode.WorkspaceConfiguration {
    return vscode.workspace.getConfiguration(this.configSection);
  }

  /**
   * L·∫•y API Key t·ª´ c·∫•u h√¨nh ho·∫∑c bi·∫øn m√¥i tr∆∞·ªùng
   */
  public getApiKey(): string | undefined {
    const config = this.getConfig();
    const configApiKey = config.get<string>('apiKey');
    
    // ∆Øu ti√™n API key t·ª´ c·∫•u h√¨nh, sau ƒë√≥ t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
    if (configApiKey && configApiKey.trim()) {
      return configApiKey.trim();
    }
    
    return (
      process.env.GOOGLE_GENAI_API_KEY ||
      process.env.GEMINI_API_KEY ||
      process.env.GOOGLE_API_KEY
    );
  }

  /**
   * Thi·∫øt l·∫≠p API Key
   */
  public async setApiKey(apiKey: string): Promise<void> {
    const config = this.getConfig();
    await config.update('apiKey', apiKey, vscode.ConfigurationTarget.Global);
  }

  /**
   * X√≥a API Key
   */
  public async clearApiKey(): Promise<void> {
    const config = this.getConfig();
    await config.update('apiKey', '', vscode.ConfigurationTarget.Global);
  }

  /**
   * L·∫•y model ƒë∆∞·ª£c c·∫•u h√¨nh
   */
  public getModel(): string {
    const config = this.getConfig();
    return config.get<string>('model', 'gemini-2.0-flash');
  }

  /**
   * Thi·∫øt l·∫≠p model
   */
  public async setModel(model: string): Promise<void> {
    const config = this.getConfig();
    await config.update('model', model, vscode.ConfigurationTarget.Global);
  }

  /**
   * Ki·ªÉm tra xem streaming c√≥ ƒë∆∞·ª£c b·∫≠t kh√¥ng
   */
  public isStreamingEnabled(): boolean {
    const config = this.getConfig();
    return config.get<boolean>('enableStreaming', true);
  }

  /**
   * Thi·∫øt l·∫≠p streaming
   */
  public async setStreamingEnabled(enabled: boolean): Promise<void> {
    const config = this.getConfig();
    await config.update('enableStreaming', enabled, vscode.ConfigurationTarget.Global);
  }

  /**
   * L·∫•y s·ªë token t·ªëi ƒëa
   */
  public getMaxTokens(): number {
    const config = this.getConfig();
    return config.get<number>('maxTokens', 1000);
  }

  /**
   * Thi·∫øt l·∫≠p s·ªë token t·ªëi ƒëa
   */
  public async setMaxTokens(maxTokens: number): Promise<void> {
    const config = this.getConfig();
    await config.update('maxTokens', maxTokens, vscode.ConfigurationTarget.Global);
  }

  /**
   * L·∫•y temperature
   */
  public getTemperature(): number {
    const config = this.getConfig();
    return config.get<number>('temperature', 0.8);
  }

  /**
   * Thi·∫øt l·∫≠p temperature
   */
  public async setTemperature(temperature: number): Promise<void> {
    const config = this.getConfig();
    await config.update('temperature', temperature, vscode.ConfigurationTarget.Global);
  }

  /**
   * Ki·ªÉm tra xem c·∫•u h√¨nh c√≥ h·ª£p l·ªá kh√¥ng
   */
  public isConfigValid(): boolean {
    const apiKey = this.getApiKey();
    return !!(apiKey && apiKey.trim());
  }

  /**
   * L·∫•y t·∫•t c·∫£ c·∫•u h√¨nh
   */
  public getAllConfig() {
    return {
      apiKey: this.getApiKey(),
      model: this.getModel(),
      enableStreaming: this.isStreamingEnabled(),
      maxTokens: this.getMaxTokens(),
      temperature: this.getTemperature(),
      isValid: this.isConfigValid(),
    };
  }

  /**
   * Hi·ªÉn th·ªã dialog thi·∫øt l·∫≠p API Key
   */
  public async showApiKeySetupDialog(): Promise<boolean> {
    const apiKey = await vscode.window.showInputBox({
      prompt: 'Nh·∫≠p Google AI API Key c·ªßa b·∫°n',
      placeHolder: 'V√≠ d·ª•: AIzaSyC...',
      password: true,
      ignoreFocusOut: true,
      validateInput: (value) => {
        if (!value || value.trim().length === 0) {
          return 'API Key kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng';
        }
        if (value.trim().length < 20) {
          return 'API Key c√≥ v·∫ª qu√° ng·∫Øn';
        }
        if (!value.startsWith('AIza')) {
          return 'Google AI API Key th∆∞·ªùng b·∫Øt ƒë·∫ßu b·∫±ng "AIza"';
        }
        return null;
      },
    });

    if (apiKey) {
      await this.setApiKey(apiKey.trim());
      vscode.window.showInformationMessage('‚úÖ API Key ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p th√†nh c√¥ng!');
      return true;
    }

    return false;
  }

  /**
   * Hi·ªÉn th·ªã dialog x√°c nh·∫≠n x√≥a API Key
   */
  public async showClearApiKeyDialog(): Promise<boolean> {
    const choice = await vscode.window.showWarningMessage(
      'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a API Key?',
      { modal: true },
      'X√≥a',
      'H·ªßy'
    );

    if (choice === 'X√≥a') {
      await this.clearApiKey();
      vscode.window.showInformationMessage('üóëÔ∏è API Key ƒë√£ ƒë∆∞·ª£c x√≥a');
      return true;
    }

    return false;
  }

  /**
   * Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n l·∫•y API Key
   */
  public showApiKeyGuide(): void {
    const message = `
üîë H∆∞·ªõng d·∫´n l·∫•y Google AI API Key:

1. Truy c·∫≠p: https://makersuite.google.com/app/apikey
2. ƒêƒÉng nh·∫≠p b·∫±ng t√†i kho·∫£n Google
3. Click "Create API Key"
4. Copy API Key v√† paste v√†o TomiChat

üí° L∆∞u √Ω:
- API Key mi·ªÖn ph√≠ c√≥ gi·ªõi h·∫°n s·ª≠ d·ª•ng
- Kh√¥ng chia s·∫ª API Key v·ªõi ng∆∞·ªùi kh√°c
- API Key ƒë∆∞·ª£c l∆∞u an to√†n trong VS Code settings
    `;

    vscode.window.showInformationMessage(
      'H∆∞·ªõng d·∫´n l·∫•y API Key',
      'M·ªü trang web',
      'ƒê√≥ng'
    ).then((choice) => {
      if (choice === 'M·ªü trang web') {
        vscode.env.openExternal(vscode.Uri.parse('https://makersuite.google.com/app/apikey'));
      }
    });
  }

  /**
   * L·∫Øng nghe thay ƒë·ªïi c·∫•u h√¨nh
   */
  public onConfigurationChanged(callback: () => void): vscode.Disposable {
    return vscode.workspace.onDidChangeConfiguration((event) => {
      if (event.affectsConfiguration(this.configSection)) {
        callback();
      }
    });
  }
}
