import { z } from "zod";
import { getAI, CHATBOT_CONFIG, isGenkitReady } from "./config";

/**
 * Schema cho input c·ªßa chatbot
 */
export const ChatInputSchema = z.object({
  message: z.string().min(1).max(1000).describe("Tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng"),
  conversationHistory: z
    .array(
      z.object({
        role: z.enum(["user", "model"]),
        content: z.string(),
      })
    )
    .optional()
    .describe("L·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán"),
});

/**
 * Schema cho output c·ªßa chatbot
 */
export const ChatOutputSchema = z.object({
  response: z.string().describe("Ph·∫£n h·ªìi t·ª´ TomiChat"),
  suggestions: z
    .array(z.string())
    .optional()
    .describe("G·ª£i √Ω c√¢u h·ªèi ti·∫øp theo"),
});

/**
 * Flow ch√≠nh cho chatbot - x·ª≠ l√Ω tin nh·∫Øn v√† t·∫°o ph·∫£n h·ªìi
 */
export const chatFlow = async (
  input: z.infer<typeof ChatInputSchema>
): Promise<z.infer<typeof ChatOutputSchema>> => {
  const { message, conversationHistory = [] } = input;
  const ai = getAI();

  // Ki·ªÉm tra xem Genkit c√≥ s·∫µn s√†ng kh√¥ng
  if (!isGenkitReady() || !ai) {
    return {
      response: `‚ùå Xin l·ªói, TomiChat ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh ƒë√∫ng c√°ch.

ƒê·ªÉ s·ª≠ d·ª•ng TomiChat, b·∫°n c·∫ßn:
1. T·∫°o Google AI API key t·∫°i: https://makersuite.google.com/app/apikey
2. Thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng GOOGLE_GENAI_API_KEY
3. Kh·ªüi ƒë·ªông l·∫°i VS Code

V√≠ d·ª•:
\`\`\`bash
export GOOGLE_GENAI_API_KEY="your-api-key-here"
\`\`\`

Ho·∫∑c b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng c√°c bi·∫øn m√¥i tr∆∞·ªùng kh√°c:
- GEMINI_API_KEY
- GOOGLE_API_KEY`,
      suggestions: [
        "H∆∞·ªõng d·∫´n c√†i ƒë·∫∑t API key",
        "T√¥i ƒë√£ c√≥ API key r·ªìi",
        "S·ª≠ d·ª•ng ch·∫ø ƒë·ªô demo",
      ],
    };
  }

  // T·∫°o messages array cho Genkit
  const messages = [
    ...conversationHistory.map((msg) => ({
      role: msg.role as "user" | "model",
      content: [{ text: msg.content }],
    })),
    {
      role: "user" as const,
      content: [{ text: message }],
    },
  ];

  try {
    // G·ªçi Genkit ƒë·ªÉ t·∫°o ph·∫£n h·ªìi
    const response = await ai.generate({
      model: CHATBOT_CONFIG.model,
      system: CHATBOT_CONFIG.system,
      messages,
      config: CHATBOT_CONFIG.config,
    });

    // T·∫°o g·ª£i √Ω d·ª±a tr√™n n·ªôi dung ph·∫£n h·ªìi
    const suggestions = generateSuggestions(message, response.text);

    return {
      response: response.text,
      suggestions,
    };
  } catch (error) {
    console.error("L·ªói khi t·∫°o ph·∫£n h·ªìi:", error);

    // Fallback response khi c√≥ l·ªói
    return {
      response:
        "Xin l·ªói, t√¥i ƒëang g·∫∑p m·ªôt ch√∫t v·∫•n ƒë·ªÅ. B·∫°n c√≥ th·ªÉ th·ª≠ l·∫°i kh√¥ng? ü§î",
      suggestions: [
        "H√£y k·ªÉ cho t√¥i m·ªôt √Ω t∆∞·ªüng c√¢u chuy·ªán",
        "T√¥i mu·ªën t·∫°o m·ªôt nh√¢n v·∫≠t m·ªõi",
        "Gi√∫p t√¥i nghƒ© ra m·ªôt c·ªët truy·ªán th√∫ v·ªã",
      ],
    };
  }
};

/**
 * Schema cho story generation input
 */
export const StoryInputSchema = z.object({
  idea: z.string().describe("√ù t∆∞·ªüng c√¢u chuy·ªán"),
  genre: z.string().optional().describe("Th·ªÉ lo·∫°i c√¢u chuy·ªán"),
  length: z
    .enum(["short", "medium", "long"])
    .default("medium")
    .describe("ƒê·ªô d√†i c√¢u chuy·ªán"),
});

/**
 * Schema cho story generation output
 */
export const StoryOutputSchema = z.object({
  title: z.string().describe("Ti√™u ƒë·ªÅ c√¢u chuy·ªán"),
  story: z.string().describe("N·ªôi dung c√¢u chuy·ªán"),
  characters: z.array(z.string()).describe("Danh s√°ch nh√¢n v·∫≠t ch√≠nh"),
  moral: z.string().optional().describe("B√†i h·ªçc t·ª´ c√¢u chuy·ªán"),
});

/**
 * Flow cho vi·ªác t·∫°o c√¢u chuy·ªán t·ª´ √Ω t∆∞·ªüng
 */
export const storyGenerationFlow = async (
  input: z.infer<typeof StoryInputSchema>
): Promise<z.infer<typeof StoryOutputSchema>> => {
  const { idea, genre = "phi√™u l∆∞u", length } = input;
  const ai = getAI();

  // Ki·ªÉm tra xem Genkit c√≥ s·∫µn s√†ng kh√¥ng
  if (!isGenkitReady() || !ai) {
    return {
      title: "Kh√¥ng th·ªÉ t·∫°o c√¢u chuy·ªán",
      story:
        "Xin l·ªói, TomiChat ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh ƒë√∫ng c√°ch. Vui l√≤ng thi·∫øt l·∫≠p Google AI API key ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y.",
      characters: [],
      moral: "H√£y lu√¥n chu·∫©n b·ªã k·ªπ l∆∞·ª°ng tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu m·ªôt cu·ªôc phi√™u l∆∞u!",
    };
  }

  const lengthPrompt = {
    short: "m·ªôt c√¢u chuy·ªán ng·∫Øn (200-300 t·ª´)",
    medium: "m·ªôt c√¢u chuy·ªán v·ª´a ph·∫£i (500-700 t·ª´)",
    long: "m·ªôt c√¢u chuy·ªán d√†i (1000-1500 t·ª´)",
  }[length];

  const prompt = `D·ª±a tr√™n √Ω t∆∞·ªüng: "${idea}"
Th·ªÉ lo·∫°i: ${genre}
H√£y t·∫°o ra ${lengthPrompt} v·ªõi:
- Ti√™u ƒë·ªÅ h·∫•p d·∫´n
- C·ªët truy·ªán r√µ r√†ng v·ªõi kh·ªüi ƒë·∫ßu, ph√°t tri·ªÉn v√† k·∫øt th√∫c
- Nh√¢n v·∫≠t sinh ƒë·ªông
- B√†i h·ªçc √Ω nghƒ©a (n·∫øu ph√π h·ª£p)

Tr·∫£ v·ªÅ k·∫øt qu·∫£ theo ƒë·ªãnh d·∫°ng JSON v·ªõi c√°c tr∆∞·ªùng: title, story, characters, moral.`;

  try {
    const response = await ai.generate({
      model: CHATBOT_CONFIG.model,
      prompt,
      config: {
        ...CHATBOT_CONFIG.config,
        maxOutputTokens: length === "long" ? 2000 : 1000,
      },
      output: {
        schema: z.object({
          title: z.string(),
          story: z.string(),
          characters: z.array(z.string()),
          moral: z.string().optional(),
        }),
      },
    });

    return (
      response.output || {
        title: "C√¢u chuy·ªán t·ª´ √Ω t∆∞·ªüng c·ªßa b·∫°n",
        story:
          "Xin l·ªói, t√¥i kh√¥ng th·ªÉ t·∫°o c√¢u chuy·ªán l√∫c n√†y. H√£y th·ª≠ l·∫°i sau!",
        characters: [],
        moral: undefined,
      }
    );
  } catch (error) {
    console.error("L·ªói khi t·∫°o c√¢u chuy·ªán:", error);
    throw new Error("Kh√¥ng th·ªÉ t·∫°o c√¢u chuy·ªán. Vui l√≤ng th·ª≠ l·∫°i!");
  }
};

/**
 * H√†m t·∫°o g·ª£i √Ω d·ª±a tr√™n ng·ªØ c·∫£nh
 */
function generateSuggestions(
  userMessage: string,
  _botResponse: string
): string[] {
  const suggestions: string[] = [];

  // G·ª£i √Ω d·ª±a tr√™n t·ª´ kh√≥a trong tin nh·∫Øn
  if (
    userMessage.toLowerCase().includes("c√¢u chuy·ªán") ||
    userMessage.toLowerCase().includes("truy·ªán")
  ) {
    suggestions.push("T·∫°o th√™m m·ªôt c√¢u chuy·ªán kh√°c");
    suggestions.push("Ph√°t tri·ªÉn nh√¢n v·∫≠t trong c√¢u chuy·ªán n√†y");
  }

  if (userMessage.toLowerCase().includes("nh√¢n v·∫≠t")) {
    suggestions.push("T·∫°o th√™m nh√¢n v·∫≠t ph·ª•");
    suggestions.push("M√¥ t·∫£ chi ti·∫øt v·ªÅ nh√¢n v·∫≠t n√†y");
  }

  if (
    userMessage.toLowerCase().includes("c·ªët truy·ªán") ||
    userMessage.toLowerCase().includes("k·ªãch b·∫£n")
  ) {
    suggestions.push("Th√™m t√¨nh ti·∫øt b·∫•t ng·ªù");
    suggestions.push("T·∫°o k·∫øt th√∫c kh√°c");
  }

  // G·ª£i √Ω m·∫∑c ƒë·ªãnh
  if (suggestions.length === 0) {
    suggestions.push(
      "K·ªÉ cho t√¥i m·ªôt √Ω t∆∞·ªüng c√¢u chuy·ªán m·ªõi",
      "T·∫°o m·ªôt nh√¢n v·∫≠t th√∫ v·ªã",
      "Gi√∫p t√¥i nghƒ© ra m·ªôt c·ªët truy·ªán"
    );
  }

  return suggestions.slice(0, 3); // Gi·ªõi h·∫°n 3 g·ª£i √Ω
}
