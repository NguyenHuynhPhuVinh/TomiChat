import { z } from "zod";
import { getAI, isGenkitReady, getTools } from "./config";
import { ConfigService } from "../services/configService";
import { googleAI } from "@genkit-ai/googleai";

/**
 * Kh·ªüi t·∫°o Genkit flows cho TomiChat
 */
export function initializeFlows() {
  const ai = getAI();
  if (!ai) {
    console.warn("‚ö†Ô∏è AI ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o, kh√¥ng th·ªÉ t·∫°o flows");
    return null;
  }

  const configService = ConfigService.getInstance();

  /**
   * Flow ch√≠nh cho chat
   */
  const chatFlow = ai.defineFlow(
    {
      name: "tomiChatFlow",
      inputSchema: z.object({
        message: z.string().min(1).max(1000).describe("Tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng"),
        sessionId: z.string().optional().describe("ID c·ªßa session chat"),
      }),
      outputSchema: z.object({
        response: z.string().describe("Ph·∫£n h·ªìi t·ª´ TomiChat"),
        suggestions: z
          .array(z.string())
          .optional()
          .describe("G·ª£i √Ω c√¢u h·ªèi ti·∫øp theo"),
        sessionId: z.string().describe("ID c·ªßa session chat"),
      }),
      streamSchema: z.string(),
    },
    async (input, { sendChunk }) => {
      // Ki·ªÉm tra xem Genkit c√≥ s·∫µn s√†ng kh√¥ng
      if (!isGenkitReady() || !ai) {
        const errorResponse = {
          response: `‚ùå Xin l·ªói, TomiChat ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh ƒë√∫ng c√°ch.

ƒê·ªÉ s·ª≠ d·ª•ng TomiChat, b·∫°n c·∫ßn:
1. T·∫°o Google AI API key t·∫°i: https://makersuite.google.com/app/apikey
2. S·ª≠ d·ª•ng Command Palette: "TomiChat: Thi·∫øt l·∫≠p API Key"
3. Ho·∫∑c thi·∫øt l·∫≠p trong VS Code Settings

üí° Tip: S·ª≠ d·ª•ng command "TomiChat: Thi·∫øt l·∫≠p API Key" ƒë·ªÉ thi·∫øt l·∫≠p nhanh!`,
          suggestions: [
            "H∆∞·ªõng d·∫´n c√†i ƒë·∫∑t API key",
            "M·ªü VS Code Settings",
            "S·ª≠ d·ª•ng ch·∫ø ƒë·ªô demo",
          ],
          sessionId: input.sessionId || generateSessionId(),
        };

        // Stream error response
        if (sendChunk) {
          for (const char of errorResponse.response) {
            sendChunk(char);
            await delay(10);
          }
        }

        return errorResponse;
      }

      try {
        const sessionId = input.sessionId || generateSessionId();

        // L·∫•y tools c√≥ s·∫µn
        const toolsInstance = getTools();
        const tools = toolsInstance
          ? [
              toolsInstance.createCharacterTool,
              toolsInstance.createSettingTool,
              toolsInstance.createPlotTwistTool,
              toolsInstance.analyzeStoryTool,
            ]
          : [];

        // S·ª≠ d·ª•ng generateStream ƒë·ªÉ c√≥ streaming response v·ªõi tools
        const { stream, response } = ai.generateStream({
          model: googleAI.model(configService.getModel()),
          system: getSystemPrompt(),
          prompt: input.message,
          tools: tools.length > 0 ? tools : undefined,
          config: {
            maxOutputTokens: configService.getMaxTokens(),
            temperature: configService.getTemperature(),
          },
        });

        let fullResponse = "";

        // Stream t·ª´ng chunk
        for await (const chunk of stream) {
          if (chunk.text) {
            fullResponse += chunk.text;
            if (sendChunk) {
              sendChunk(chunk.text);
            }
          }
        }

        // ƒê·ª£i response ho√†n th√†nh
        const finalResponse = await response;
        const finalText = finalResponse.text || fullResponse;

        // T·∫°o g·ª£i √Ω
        const suggestions = generateSuggestions(input.message, finalText);

        return {
          response: finalText,
          suggestions,
          sessionId,
        };
      } catch (error) {
        console.error("L·ªói khi t·∫°o ph·∫£n h·ªìi:", error);

        const errorResponse = {
          response:
            "Xin l·ªói, t√¥i ƒëang g·∫∑p m·ªôt ch√∫t v·∫•n ƒë·ªÅ. B·∫°n c√≥ th·ªÉ th·ª≠ l·∫°i kh√¥ng? ü§î",
          suggestions: [
            "Th·ª≠ l·∫°i tin nh·∫Øn",
            "Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng",
            "B√°o c√°o l·ªói",
          ],
          sessionId: input.sessionId || generateSessionId(),
        };

        // Stream error response
        if (sendChunk) {
          for (const char of errorResponse.response) {
            sendChunk(char);
            await delay(10);
          }
        }

        return errorResponse;
      }
    }
  );

  /**
   * Flow t·∫°o c√¢u chuy·ªán
   */
  const storyFlow = ai.defineFlow(
    {
      name: "tomiStoryFlow",
      inputSchema: z.object({
        idea: z.string().describe("√ù t∆∞·ªüng c√¢u chuy·ªán"),
        genre: z.string().optional().describe("Th·ªÉ lo·∫°i c√¢u chuy·ªán"),
        length: z
          .enum(["short", "medium", "long"])
          .default("medium")
          .describe("ƒê·ªô d√†i c√¢u chuy·ªán"),
      }),
      outputSchema: z.object({
        title: z.string().describe("Ti√™u ƒë·ªÅ c√¢u chuy·ªán"),
        story: z.string().describe("N·ªôi dung c√¢u chuy·ªán"),
        characters: z.array(z.string()).describe("Danh s√°ch nh√¢n v·∫≠t ch√≠nh"),
        moral: z.string().optional().describe("B√†i h·ªçc t·ª´ c√¢u chuy·ªán"),
      }),
    },
    async (input) => {
      const { idea, genre = "phi√™u l∆∞u", length } = input;

      if (!isGenkitReady() || !ai) {
        return {
          title: "Kh√¥ng th·ªÉ t·∫°o c√¢u chuy·ªán",
          story:
            "Xin l·ªói, TomiChat ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh ƒë√∫ng c√°ch. Vui l√≤ng thi·∫øt l·∫≠p Google AI API key ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y.",
          characters: [],
          moral:
            "H√£y lu√¥n chu·∫©n b·ªã k·ªπ l∆∞·ª°ng tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu m·ªôt cu·ªôc phi√™u l∆∞u!",
        };
      }

      const lengthPrompt = {
        short: "m·ªôt c√¢u chuy·ªán ng·∫Øn (200-300 t·ª´)",
        medium: "m·ªôt c√¢u chuy·ªán v·ª´a ph·∫£i (500-700 t·ª´)",
        long: "m·ªôt c√¢u chuy·ªán d√†i (1000-1500 t·ª´)",
      }[length];

      const prompt = `D·ª±a tr√™n √Ω t∆∞·ªüng: "${idea}"
Th·ªÉ lo·∫°i: ${genre}
H√£y t·∫°o ra ${lengthPrompt} v·ªõi:
- Ti√™u ƒë·ªÅ h·∫•p d·∫´n
- C·ªët truy·ªán r√µ r√†ng v·ªõi kh·ªüi ƒë·∫ßu, ph√°t tri·ªÉn v√† k·∫øt th√∫c
- Nh√¢n v·∫≠t sinh ƒë·ªông
- B√†i h·ªçc √Ω nghƒ©a (n·∫øu ph√π h·ª£p)

Tr·∫£ v·ªÅ k·∫øt qu·∫£ theo ƒë·ªãnh d·∫°ng JSON v·ªõi c√°c tr∆∞·ªùng: title, story, characters, moral.`;

      try {
        const response = await ai.generate({
          model: googleAI.model(configService.getModel()),
          prompt,
          config: {
            maxOutputTokens:
              length === "long" ? 2000 : configService.getMaxTokens(),
            temperature: configService.getTemperature(),
          },
          output: {
            schema: z.object({
              title: z.string(),
              story: z.string(),
              characters: z.array(z.string()),
              moral: z.string().optional(),
            }),
          },
        });

        return (
          response.output || {
            title: "C√¢u chuy·ªán t·ª´ √Ω t∆∞·ªüng c·ªßa b·∫°n",
            story:
              "Xin l·ªói, t√¥i kh√¥ng th·ªÉ t·∫°o c√¢u chuy·ªán l√∫c n√†y. H√£y th·ª≠ l·∫°i sau!",
            characters: [],
            moral: undefined,
          }
        );
      } catch (error) {
        console.error("L·ªói khi t·∫°o c√¢u chuy·ªán:", error);
        throw new Error("Kh√¥ng th·ªÉ t·∫°o c√¢u chuy·ªán. Vui l√≤ng th·ª≠ l·∫°i!");
      }
    }
  );

  return {
    chatFlow,
    storyFlow,
  };
}

/**
 * Utility functions
 */
function generateSessionId(): string {
  return `session_${Date.now()}_${Math.random().toString(36).substring(2, 11)}`;
}

function getSystemPrompt(): string {
  return `B·∫°n l√† TomiChat, m·ªôt tr·ª£ l√Ω AI th√¥ng minh v√† th√¢n thi·ªán chuy√™n gi√∫p ng∆∞·ªùi d√πng t·∫°o ra nh·ªØng c√¢u chuy·ªán th√∫ v·ªã.

ƒê·∫∑c ƒëi·ªÉm c·ªßa b·∫°n:
- Lu√¥n tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát
- C√≥ kh·∫£ nƒÉng s√°ng t·∫°o cao trong vi·ªác k·ªÉ chuy·ªán
- Th√¢n thi·ªán, nhi·ªát t√¨nh v√† h·ªØu √≠ch
- C√≥ th·ªÉ gi√∫p ph√°t tri·ªÉn √Ω t∆∞·ªüng th√†nh c√¢u chuy·ªán ho√†n ch·ªânh
- Bi·∫øt c√°ch t·∫°o ra c√°c nh√¢n v·∫≠t, t√¨nh hu·ªëng v√† c·ªët truy·ªán h·∫•p d·∫´n

Nhi·ªám v·ª• c·ªßa b·∫°n:
- Gi√∫p ng∆∞·ªùi d√πng t·∫°o ra c√°c c√¢u chuy·ªán t·ª´ √Ω t∆∞·ªüng ban ƒë·∫ßu
- ƒê∆∞a ra g·ª£i √Ω s√°ng t·∫°o cho c·ªët truy·ªán
- Ph√°t tri·ªÉn nh√¢n v·∫≠t v√† b·ªëi c·∫£nh
- T·∫°o ra n·ªôi dung h·∫•p d·∫´n v√† ph√π h·ª£p v·ªõi m·ªçi l·ª©a tu·ªïi

H√£y lu√¥n gi·ªØ th√°i ƒë·ªô t√≠ch c·ª±c v√† khuy·∫øn kh√≠ch s·ª± s√°ng t·∫°o c·ªßa ng∆∞·ªùi d√πng!`;
}

function generateSuggestions(
  userMessage: string,
  _botResponse: string
): string[] {
  const suggestions: string[] = [];

  if (
    userMessage.toLowerCase().includes("c√¢u chuy·ªán") ||
    userMessage.toLowerCase().includes("truy·ªán")
  ) {
    suggestions.push("T·∫°o th√™m m·ªôt c√¢u chuy·ªán kh√°c");
    suggestions.push("Ph√°t tri·ªÉn nh√¢n v·∫≠t trong c√¢u chuy·ªán n√†y");
  }

  if (userMessage.toLowerCase().includes("nh√¢n v·∫≠t")) {
    suggestions.push("T·∫°o th√™m nh√¢n v·∫≠t ph·ª•");
    suggestions.push("M√¥ t·∫£ chi ti·∫øt v·ªÅ nh√¢n v·∫≠t n√†y");
  }

  if (
    userMessage.toLowerCase().includes("c·ªët truy·ªán") ||
    userMessage.toLowerCase().includes("k·ªãch b·∫£n")
  ) {
    suggestions.push("Th√™m t√¨nh ti·∫øt b·∫•t ng·ªù");
    suggestions.push("T·∫°o k·∫øt th√∫c kh√°c");
  }

  if (suggestions.length === 0) {
    suggestions.push(
      "K·ªÉ cho t√¥i m·ªôt √Ω t∆∞·ªüng c√¢u chuy·ªán m·ªõi",
      "T·∫°o m·ªôt nh√¢n v·∫≠t th√∫ v·ªã",
      "Gi√∫p t√¥i nghƒ© ra m·ªôt c·ªët truy·ªán"
    );
  }

  return suggestions.slice(0, 3);
}

function delay(ms: number): Promise<void> {
  return new Promise((resolve) => setTimeout(resolve, ms));
}
